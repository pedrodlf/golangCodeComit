version: 0.2
env:
 # variables:
    # This S3 bucket is used to store the packaged Lambda deployment bundle.
    # Make sure to provide a valid S3 bucket name (it must exist already).
    # The CodeBuild IAM role must allow write access to it.
    S3_BUCKET: "blockchain-lambdas"
  #  PACKAGE: "github.com/aws-samples/lambda-go-samples"

phases:
  install:
    commands:
      # AWS Codebuild Go images use /go for the $GOPATH so copy the
      # application source code into that directory structure.
      #- mkdir -p "/go/src/$(dirname ${PACKAGE})"
      #- ln -s "${CODEBUILD_SRC_DIR}" "/go/src/${PACKAGE}"
      # Print all environment variables (handy for AWS CodeBuild logs)
      - env
      # Install golint
      #- go get -u github.com/golang/lint/golint

  pre_build:
    commands:
      # Make sure we're in the project directory within our GOPATH
      #- cd "/go/src/${PACKAGE}"
      # Fetch all dependencies
      - go get -t ./...
      # Ensure that the code passes all lint tests
      #- golint -set_exit_status
      # Check for common Go problems with 'go vet'
      #- go vet .
      # Run all tests included with the application
      #- go test .

  build:
    commands:
      # Build the go application
      - go build -o main
      # Package the application with AWS SAM
      #- aws cloudformation package --template-file template.yml --s3-bucket ${S3_BUCKET} --output-template-file packaged.yml
      #- aws cloudformation package --s3-bucket ${S3_BUCKET}
      - zip accounts_users_userID_points_patch.zip ./main
      #- aws lambda create-function --region eu-west-1 --function-name main --memory 512 --role arn:aws:iam::622738256393:role/CodeStarWorker-lambda-api-go-t-Lambda --runtime go1.x  --zip-file fileb://products_get.zip --handler main

artifacts:
  files:
  - accounts_users_userID_points_patch.zip